/* EGR */
#include <uartStdio.h>
#include <interrupt.h>
#include <soc_AM335x.h>
#include <hw_gpio_v2.h>
#include <hw_types.h>
#include <hw_dmtimer.h>
#include "EGR_Cape.h"
#include "delay_ms.h"
#include "Conf_mod.h"
#include "GPIO.h"
#include <stdint.h>

unsigned int cyclesToMs = 24000 ; //24000 Mhz in ms
volatile int Signal = 0 ;
uint32_t TIMER_START = UINT32_MAX - 480000 ;
unsigned volatile int reloadTime = 0; //ms
uint32_t compareValue = 0 ; // in ms
volatile int OVF_EN_FLAG = 1 ;
volatile int MAT_EN_FLAG = 0 ;
volatile int trigger =1;


void myTimer2Isr(void) __attribute__((interrupt));

void myTimer2Isr(){
//	UARTprintf("Interrupt eingetreten");
	if((HWREG(SOC_DMTIMER_2_REGS + DMTIMER_IRQSTATUS) & (1<<OVF_EN_FLAG)) != 0){
		UARTprintf("Signal im interrupt = 1 \n") ;
		Signal = 1 ;

		//write to servo
		EGR_PinWrite(GPIO_PORT3_PIN2_MODUL, GPIO_PORT3_PIN2, PIN_HIGH) ;

		//Loeschen Interrupt
		HWREG(SOC_DMTIMER_2_REGS + DMTIMER_IRQSTATUS) = (1<< OVF_EN_FLAG);
	}
	else if((HWREG(SOC_DMTIMER_2_REGS + DMTIMER_IRQSTATUS) & (1<<MAT_EN_FLAG)) != 0){
		UARTprintf("Signal im interrupt = 0 \n") ;
		Signal = 0 ;
//		UARTprintf("CompareValue: %d \n", compareValue) ;

		//write to Servo
		EGR_PinWrite(GPIO_PORT3_PIN2_MODUL, GPIO_PORT3_PIN2, PIN_LOW) ;

		//interrupt loeschen
		HWREG(SOC_DMTIMER_2_REGS + DMTIMER_IRQSTATUS) = (1<< MAT_EN_FLAG);
	}
}


int main() {
	//Servo MUX no pullup
	PinMuxing(CONF_PORT3_PIN2, 0, 1, 7) ;

	//Taster & Pullup
	PinMuxing(CONF_PORT1_PIN2, 0, 1, 7) ;
	PinMuxing(CONF_PORT1_PIN4, 0, 1, 7) ;
	PinMuxing(CONF_PORT1_PIN6, 0, 1, 7) ;

	//Taster Als Input
	EGR_GPIODirSet(GPIO_PORT1_PIN2_MODUL, 12, 1) ;
	EGR_GPIODirSet(GPIO_PORT1_PIN4_MODUL, 10, 1) ;
	EGR_GPIODirSet(GPIO_PORT1_PIN6_MODUL, 8, 1) ;

	//Servo als output
	EGR_GPIODirSet(GPIO_PORT3_PIN2_MODUL, GPIO_PORT3_PIN2, 0) ;

	//interrupt
	//initialise interrupt
	IntMasterIRQEnable() ;
	IntAINTCInit() ;

	//global interrupt steuerung


	//lokale interrupt quelle aktivieren
	IntSystemEnable(SYS_INT_TINT2) ;

	//interrupt function
	IntRegister(SYS_INT_TINT2, myTimer2Isr) ;

	//input trigger
	HWREG(SOC_GPIO_2_REGS + GPIO_IRQSTATUS_SET(0)) |= (1<<8) ;
	HWREG(SOC_GPIO_2_REGS + GPIO_FALLINGDETECT) |= (1<<8) ;

	//timer configuration
	//timer auf auto-reload & compare mode enable
	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TCLR) |= (1<<1)| (1<<6) ;

	//prescaler aus
	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TCLR) &= ~(1<<5) ;
	//prescaler an
//	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TCLR) |= (1<<5) ;

	//timer zaehlregister
	//timer start setzen
	//TIMER_START = 0xFFFFFFFF - 480000 ;
//	UARTprintf("TIMER_START = %d \n", TIMER_START);
	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TCRR) = TIMER_START ;

	//timer reload
	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TLDR) = TIMER_START ;

	UARTprintf("timer_start: %u \n", (unsigned long)TIMER_START) ;

	//timer compare register

	compareValue = UINT32_MAX - 480000 + (1*cyclesToMs) ; // in ms
	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TMAR) = compareValue ;
	UARTprintf("CompareValue at INIT: %d \n", compareValue) ;

	//timer interrupt Tigger auf Overflow und compareMATch setzen
	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_IRQENABLE_SET) |= ((1<<OVF_EN_FLAG) | (1 << MAT_EN_FLAG)) ;

	//timer starten
	HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TCLR) |= (1<<0) ;


	while (1)
	{

//		UARTprintf("trigger: %d \n", trigger);
//		UARTprintf("0");
//		compareValue = TIMER_START + (2 * cyclesToMs) ;
		UARTprintf("CompareValue: %d \n", compareValue);
//
//		HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TMAR) = compareValue ;
//		UARTprintf("1");
//
////		delay_ms(500);
//
//		compareValue = TIMER_START + (1 * cyclesToMs) ;
//		UARTprintf("CompareValue: %d \n", compareValue);

//		HWREG(SOC_DMTIMER_2_REGS + DMTIMER_TMAR) = compareValue ;
//		delay_ms(500);


	}
	return 0;
}
